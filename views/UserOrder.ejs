<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.css">
   <!-- DataTable HEADER-->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.6/dist/sweetalert2.all.min.js"></script>
  <style>
    /* Your custom styles here */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100%;
      width: 250px;
      background-color: #0b0a0a;
      padding-top: 25px;
      color: white;
    }

    .sidebar a {
      font-size: 17px;
      color: white;
      text-decoration: none;
    }

    .sidebar h2 {
      color: rgb(248, 248, 249);
      font-size:30px;
    }

    .main-content {
      margin-left: 250px;
      padding: 20px;
    }

    .table-responsive {
      /* Style to prevent table overflow */
      overflow-x: auto;
    }

    .button:hover {
      box-shadow: 0px 0px 5px #2196F3, /* Blue box shadow color */
                  0px 0px 30px #2196F3,
                  0px 0px 90px #2196F3;
    }

    .button1:hover {
      box-shadow: 0px 0px 5px #fe21a2,
                   0px 0px 30px #fe21a2,
                   0px 0px 90px #fe21a2;
    }

    /* ////////////////////Toggle dark mode button//////////////////////// */
.toggle-dark-theme {
    position: fixed;
    top: 30px;
    right: 30px;
    cursor: pointer;
    z-index: 2;
}

.toggle-dark-theme button {
    width: 70px;
    background-color: #ccc;
    border-radius: 20px;
    border: none;
    position: relative;
    padding: 4px;
    cursor: pointer;
}

.toggle-dark-theme .icon {
    width: 26px;
    height: 26px;
    border-radius: 50%;
    background-color: #32006a;
    position: relative;
    transition: all 0.5s ease;
}

.toggle-dark-theme .icon::before {
    font-family: "Font Awesome 6 Free";
    font-weight: 400;
    content: "\f186";
    position: absolute;
    color: #f5ecec;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.5s ease;
}

body.dark {
    background-color: #252525; /* Dark mode background color */
    color: #fff; /* Dark mode text color */
}

/* Dark mode styles for sidebar */
body.dark .sidebar {
    background-color: #252525;
    color: #fff;
    border-right: 1px solid #555; /* Dark mode sidebar border color */
}

body.dark .sidebar h2 {
    color: #fcc288; /* Heading color in dark mode sidebar */
}

body.dark .sidebar a {
    color: #0013f8; /* Link color in dark mode */
}

/* Dark mode table styles */
body.dark .main-content table {
    border-color: #555; /* Dark mode table border color */
}

body.dark .main-content th,
body.dark .main-content td {
    border-color: #444; /* Dark mode table cell border color */
    color: #fff;
}

/* Dark mode styles for alternating row colors */
body.dark .main-content tbody tr:nth-child(even) {
    background-color: #353535; /* Dark mode alternate row color */
    color: #fff;
}

/* Dark mode styles for table header */
body.dark .main-content thead {
    background-color: #303030; /* Dark mode table header background color */
}

/* Dark mode toggle button styles */
body.dark .toggle-dark-theme .icon {
    transform: translateX(calc(100% + 10px));
    background-color: yellow; /* Dark mode toggle button background color */
}

body.dark .toggle-dark-theme .icon::before {
    color: #000;
    content: "\f185";
}
.sidebar .nav-link {
  margin-bottom: 20px; /* Adjust the value as needed for spacing */
}

    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }

    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }

    th {
      background-color: #f2f2f2;
    }

    @media screen and (max-width: 600px) {
      th, td {
        display: block;
        width: 100%;
        box-sizing: border-box;
      }

      th {
        text-align: center;
      }
    }
    
    .delete-button {
        display: inline-block;
        padding: 8px 16px;
        background-color: #ff0000; /* Red color for delete button, you can change it to your desired color */
        color: #fff; /* Text color for the button */
        text-decoration: none; /* Remove underline from the link */
        border-radius: 4px; /* Optional: Adds rounded corners */
    }

    .delete-button:hover {
        background-color: #cc0000; /* Darker red color on hover */
    }
    .cancel-btn {
            background-color: #e43119;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .cancel-btn1 {
            background-color: #028006;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .cancel-btn:hover {
            background-color: #e92e11;
        }

        .return-btn {
            background-color: #ff9900;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .return-btn:hover {
            background-color: #e68a00;
        }
  </style>
     <%- include('nav') %>
</head>
<body>


 <div class="col-md-9 main-content">
  <h1 style="text-align: center;">User Order</h1>
  <div class="container">
    <%-include('userNavbar')%>
    <br>   
        <br> 
  <% if (orders && orders.length > 0) { %>
  <table id="example" class="table table-striped" style="width:100%">
      <thead>
          <tr>
              <th style="background-color:#3da3f6">Product Name</th>
              <th style="background-color:#3da3f6">Quantity</th>
              <th style="background-color:#3da3f6">Discount</th>
              <th style="background-color:#3da3f6">Total Prices</th>
              <th style="background-color:#3da3f6">Order Date</th>
              <th style="background-color:#3da3f6">Status</th>
              <th style="background-color:#3da3f6">Payment Method</th>
              <th style="background-color:#3da3f6">Action</th>
              <th style="background-color:#3da3f6">View</th>
          </tr>
      </thead>
      <tbody>
         
              <% orders.forEach((order, index) => { %>
                  <% order.productcollection.forEach((product, productIndex) => { %>
                      <tr>
                          <td data-label="Product Name"><%= product.productName %></td>
                          <td data-label="Quantity"><%= product.quantity %></td>
                          <!-- Removed the line causing the issue -->
                          <td data-label="Discount"><%= order.Discount %></td>
                          <td data-label="Total Prices">â‚¹<%= product.price * product.quantity - order.Discount %></td>
                          <td data-label="Order Date"> <%= new Date(order.orderDate).toLocaleDateString() %></td>
                          <td data-label="Status"><%= product.status %></td>
                          <td data-label="Payment Method"><%= order.paymentMethod %></td>
                          <td data-label="Action">
                              <% if (product.status === 'Delivered' && product.status !== 'Returned') { %>
                                  <a href="javascript:void(0);" onclick="confirmReturn('<%= order.userid %>', '<%= product._id %>')" id="return" class="return-btn">Return</a>
                                  <% if (product.status === 'Returned') { %>
                                      Returned
                                  <% } %>
                              <% } else if (product.status !== 'Cancelled' && product.status !== 'Delivered' && product.status !== 'Returned') { %>
                                  <a href="javascript:void(0);" onclick="confirmCancel('<%= order.userid %>', '<%= product._id %>')" id="cancel" class="cancel-btn">Cancel</a>
                              <% } %>
                          </td>
                          <td data-label="Action">
                              <a href="/view/<%= product._id %>/<%= order._id %>" id="cancel" class="cancel-btn1">View</a>
                          </td>
                      </tr>
                  <% }); %>
              <% }); %>
          <% } else { %>
              <tr>
                <br>
                  <td colspan="9"><h1 style="color:red">No orders found</h1></td>
              </tr>
          <% } %>
      </tbody>
  </table>
</div>


<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
      integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
      crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script src="https://cdn.datatables.net/v/bs5/dt-1.13.8/datatables.min.js"></script>
    <script>
         new DataTable('#example');


    </script>

<script>

  ///////////////order cancel alert message//////////


  async function confirmCancel(userId, productId) {
      const { value: reason } = await Swal.fire({
          title: 'Cancel Order',
          input: 'select',
          inputOptions: {
              'reason1': 'Not Satisfied with Product',
              'reason2': 'Product Damaged',
              'reason3': 'Received Wrong Item',
              'reason4': 'Size Issue',
              'reason5': 'Delivery Delays'
          },
          inputPlaceholder: 'Select a reason',
          showCancelButton: true,
          confirmButtonText: 'Submit',
          cancelButtonText: 'Cancel',
          inputValidator: (value) => {
              return new Promise((resolve) => {
                  if (value) {
                      resolve();
                  } else {
                      resolve('You need to select a reason');
                  }
              });
          }
      });

      if (reason) {
          handleCancel(userId, productId, reason);
      }
  }

  function handleCancel(userId, productId, reason) {
      const ajaxUrl = `/cancel/${userId}/${productId}?reason=${reason}`;

      fetch(ajaxUrl, {
          method: 'GET',
          headers: {
              'Content-Type': 'application/json',
          },
      })
          .then(response => response.json())
          .then(data => {
              Swal.fire('Cancelled!', `Order cancelled for ${userId} with reason: ${reason}`, 'success')
                  .then(() => {
                      window.location.href = '/UserOrder';
                  });
          })
          .catch(error => {
              console.error('Error:', error);
              Swal.fire('Error', 'Failed to cancel the order. Please try again.', 'error');
          });
  }
</script>

<script>
  ////////////////return order sweet alert //////////////
  async function confirmReturn(userId, productId) {
    const { value: reason } = await Swal.fire({
      title: 'Return Order',
      input: 'select',
      inputOptions: {
        'reason1': 'Not Satisfied with Product',
        'reason2': 'Product Damaged',
        'reason3': 'Received Wrong Item',
        'reason4': 'Size Issue',
        'reason5': 'Delivery Delays'
      },
      inputPlaceholder: 'Select a reason',
      showCancelButton: true,
      confirmButtonText: 'Submit',
      cancelButtonText: 'Cancel',
      inputValidator: (value) => {
        return new Promise((resolve) => {
          if (value) {
            resolve();
          } else {
            resolve('You need to select a reason');
          }
        });
      }
    });

    if (reason) {
      handleReturn(userId, productId, reason);
    }
  }

  function handleReturn(userId, productId, reason) {
    const ajaxUrl = `/return/${userId}/${productId}?reason=${reason}`;

    fetch(ajaxUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then(response => response.json())
      .then(data => {
        Swal.fire('Returned!', `Order returned for ${userId} with reason: ${reason}`, 'success')
          .then(() => {
            window.location.href = '/UserOrder';
          });
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'Failed to return the order. Please try again.', 'error');
      });
  }
</script>
</div>
</div>
</div>

</body>
</html>